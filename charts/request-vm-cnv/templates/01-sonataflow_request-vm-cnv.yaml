apiVersion: sonataflow.org/v1alpha08
kind: SonataFlow
metadata:
  annotations:
    sonataflow.org/description: Request VM on CNV
    sonataflow.org/expressionLang: jq
    sonataflow.org/profile: prod
    sonataflow.org/version: "1.0"
  creationTimestamp: null
  labels:
    app: request-vm-cnv
    sonataflow.org/workflow-app: request-vm-cnv
  name: request-vm-cnv
spec:
  flow:
    dataInputSchema:
      failOnValidationErrors: true
      schema: schemas/request-vm-cnv__main-schema.json
    functions:
      - name: readNamespacedVirtualMachine
        operation: specs/kubevirt-openapi.yaml#readNamespacedVirtualMachine
        type: rest
      - name: createNamespacedVirtualMachine
        operation: specs/kubevirt-openapi.yaml#createNamespacedVirtualMachine
        type: rest
      - name: jiraCreateIssue
        operation: specs/jira-openapi.json#createIssue
        type: rest
      - name: jiraGetIssue
        operation: specs/jira-openapi.json#getIssue
        type: rest
      - name: createNotification
        operation: specs/notifications-openapi.yaml#createNotification
        type: rest
      - name: print
        operation: sysout
        type: custom
      - name: increaseVMStatusRunningRetries
        operation: .vmStatusRunningRetries=.vmStatusRunningRetries + 1
        type: expression
    start:
      stateName: Open issue on JIRA
    states:
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .jiraCreateIssueResult
              useResults: true
            functionRef:
              arguments:
                fields:
                  description: '"Authorization request to create VM " + .inputs.vm_name + " in namespace "+.inputs.vm_namespace + " using image "+ .inputs.vm_image'
                  issuetype:
                    name: Task
                  labels:
                    - backstage-workflow
                    - '"workflowId=" + $WORKFLOW.instanceId'
                  project:
                    key: .inputs.projectKey
                  summary: '"Authorization request to create VM " + .inputs.vm_name + " in namespace "+.inputs.vm_namespace'
              invoke: sync
              refName: jiraCreateIssue
            name: callbackAction
        name: Open issue on JIRA
        transition:
          nextState: 'Notify Backstage: JIRA ticket created'
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                actions:
                  - title: View on JIRA
                    url: $SECRET.jira_url + "/jira/servicedesk/projects/" + .inputs.projectKey + "/issues/" + .jiraCreateIssueResult.key
                message: '"JIRA ticket created to request authorization to create VM " + .inputs.vm_name + " in namespace "+.inputs.vm_namespace'
                origin: SonataFlow
                targetUsers:
                  - default/guest
                title: '"JIRA ticket created for VM " + .inputs.vm_name'
                topic: Request CM on CNV workflow
              invoke: sync
              refName: createNotification
            name: 'Create notification: JIRA ticket created'
        name: 'Notify Backstage: JIRA ticket created'
        transition:
          nextState: Poll issue
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .jiraGetIssueResult
              useResults: true
            functionRef:
              arguments:
                issueIdOrKey: .jiraCreateIssueResult.id
              invoke: sync
              refName: jiraGetIssue
            name: get issue
            sleep:
              before: PT10S
        name: Poll issue
        transition:
          nextState: Check issue done
        type: operation
      - dataConditions:
          - condition: .jiraGetIssueResult.fields.status.statusCategory.key == "done" and .jiraGetIssueResult.fields.resolution.name != "Done"
            name: VM creation denied
            transition:
              nextState: Notify VM creation denied
          - condition: .jiraGetIssueResult.fields.status.statusCategory.key == "done" and .jiraGetIssueResult.fields.resolution.name == "Done"
            name: VM creation authorized
            transition:
              nextState: Notify VM creation authorized
        defaultCondition:
          transition:
            nextState: Poll issue
        name: Check issue done
        type: switch
      - branches:
          - actions:
              - actionDataFilter:
                  useResults: true
                functionRef:
                  arguments:
                    message: '${"VM creation authorized, see Jira issue: " + $SECRET.jira_url + "/jira/servicedesk/projects/" + .inputs.projectKey + "/issues/" + .jiraCreateIssueResult.key + " ==> " + .inputs.vm_name}'
                  invoke: sync
                  refName: print
                name: printSystemOut
            name: printSystemOut
          - actions:
              - actionDataFilter:
                  useResults: true
                functionRef:
                  arguments:
                    message: '"Authorization granted to create VM" + .inputs.vm_name + " in namespace "+.inputs.vm_namespace + " using image "+ .inputs.vm_image +". A notification will be sent once the VM is ready."'
                    origin: SonataFlow
                    targetUsers:
                      - default/guest
                    title: '"Authorization granted to create VM" + .inputs.vm_name + " in namespace "+.inputs.vm_namespace'
                    topic: Request VM on CNV workflow
                  invoke: sync
                  refName: createNotification
                name: 'Create notification: VM creation authorized'
            name: 'Create notification: VM creation authorized'
        completionType: allOf
        name: Notify VM creation authorized
        numCompleted: 0
        transition:
          nextState: Create VM
        type: parallel
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .createdVM
              useResults: true
            functionRef:
              arguments:
                apiVersion: kubevirt.io/v1
                kind: VirtualMachine
                metadata:
                  labels:
                    app: .inputs.vm_name
                  name: .inputs.vm_name
                  namespace: .inputs.vm_namespace
                namespace: .inputs.vm_namespace
                spec:
                  dataVolumeTemplates:
                    - apiVersion: cdi.kubevirt.io/v1beta1
                      kind: DataVolume
                      metadata:
                        name: .inputs.vm_name
                      spec:
                        sourceRef:
                          kind: DataSource
                          name: .inputs.vm_image
                          namespace: openshift-virtualization-os-images
                        storage:
                          resources:
                            requests:
                              storage: 30Gi
                  running: true
                  template:
                    metadata:
                      labels:
                        kubevirt.io/domain: .inputs.vm_name
                        kubevirt.io/size: small
                    spec:
                      architecture: amd64
                      domain:
                        cpu:
                          cores: 1
                          sockets: 1
                          threads: 1
                        devices:
                          disks:
                            - disk:
                                bus: virtio
                              name: rootdisk
                            - disk:
                                bus: virtio
                              name: cloudinitdisk
                          interfaces:
                            - masquerade: {}
                              name: default
                        memory:
                          guest: 2Gi
                      networks:
                        - name: default
                          pod: {}
                      volumes:
                        - dataVolume:
                            name: .inputs.vm_name
                          name: rootdisk
                        - cloudInitNoCloud:
                            userData: |-
                              #cloud-config
                              user: cloud-user
                              password: 0fb2-7rts-vnrb
                              chpasswd: { expire: False }
                          name: cloudinitdisk
              invoke: sync
              refName: createNamespacedVirtualMachine
        name: Create VM
        transition:
          nextState: InitVMStatusRunningRetry
        type: operation
      - data:
          vmStatusRunningRetries: 0
        name: InitVMStatusRunningRetry
        transition:
          nextState: Poll VM
        type: inject
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .vm
              useResults: true
            functionRef:
              arguments:
                name: .inputs.vm_name
                namespace: .inputs.vm_namespace
              invoke: sync
              refName: readNamespacedVirtualMachine
            name: get VM
            sleep:
              before: PT10S
        name: Poll VM
        transition:
          nextState: IncreaseVMStatusRunningRetriesRetry
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              invoke: sync
              refName: increaseVMStatusRunningRetries
        name: IncreaseVMStatusRunningRetriesRetry
        transition:
          nextState: Check VM status
        type: operation
      - dataConditions:
          - condition: .vm.status.ready == true
            name: VM running
            transition:
              nextState: Notify VM Created
          - condition: (.vmStatusRunningRetries >   ($SECRET.vm_check_running_max_retries | tonumber))
            name: VM not running
            transition:
              nextState: Notify VM not running
        defaultCondition:
          transition:
            nextState: Poll VM
        name: Check VM status
        type: switch
      - branches:
          - actions:
              - actionDataFilter:
                  useResults: true
                functionRef:
                  arguments:
                    message: 'VM running: .vm'
                  invoke: sync
                  refName: print
                name: printSystemOut
            name: printSystemOut
          - actions:
              - actionDataFilter:
                  useResults: true
                functionRef:
                  arguments:
                    actions:
                      - title: Open console
                        url: $SECRET.cluster_console_url + "/k8s/ns/" + .inputs.vm_namespace + "/kubevirt.io~v1~VirtualMachine/" + .inputs.vm_name + "/console/standalone"
                    message: '"VM" + .inputs.vm_name + " in namespace "+.inputs.vm_namespace + " using image "+ .inputs.vm_image +" ready and running."'
                    origin: SonataFlow
                    targetUsers:
                      - default/guest
                    title: '"VM" + .inputs.vm_name + " in namespace "+.inputs.vm_namespace + " ready"'
                    topic: Request VM on CNV workflow
                  invoke: sync
                  refName: createNotification
                name: 'Create notification: VM creation running'
            name: 'Create notification: VM running'
        completionType: allOf
        end:
          terminate: true
        name: Notify VM Created
        numCompleted: 0
        type: parallel
      - branches:
          - actions:
              - actionDataFilter:
                  useResults: true
                functionRef:
                  arguments:
                    message: 'VM not running: .vm'
                  invoke: sync
                  refName: print
                name: printSystemOut
            name: printSystemOut
          - actions:
              - actionDataFilter:
                  useResults: true
                functionRef:
                  arguments:
                    message: '"VM" + .inputs.vm_name + " in namespace "+.inputs.vm_namespace + " using image "+ .inputs.vm_image +" not ready after "+.vmStatusRunningRetries+" retries: " + .vm.status'
                    origin: SonataFlow
                    targetUsers:
                      - default/guest
                    title: '"VM" + .inputs.vm_name + " in namespace "+.inputs.vm_namespace + " not ready"'
                    topic: Request VM on CNV workflow
                  invoke: sync
                  refName: createNotification
                name: 'Create notification: VM not running'
            name: 'Create notification: VM not running'
        completionType: allOf
        end:
          terminate: true
        name: Notify VM not running
        numCompleted: 0
        type: parallel
      - branches:
          - actions:
              - actionDataFilter:
                  useResults: true
                functionRef:
                  arguments:
                    message: '${"VM creation denied, see Jira issue: " + $SECRET.jira_url + "/jira/servicedesk/projects/" + .inputs.projectKey + "/issues/" + .jiraCreateIssueResult.key + " ==> " + .inputs.vm_name}'
                  invoke: sync
                  refName: print
                name: printSystemOut
            name: printSystemOut
          - actions:
              - actionDataFilter:
                  useResults: true
                functionRef:
                  arguments:
                    actions:
                      - title: View on JIRA
                        url: $SECRET.jira_url + "/jira/servicedesk/projects/" + .inputs.projectKey + "/issues/" + .jiraCreateIssueResult.key
                    message: '"Authorization denied to create VM" + .inputs.vm_name + " in namespace "+.inputs.vm_namespace + " using image "+ .inputs.vm_image '
                    origin: SonataFlow
                    targetUsers:
                      - default/guest
                    title: '"Authorization denied to create VM" + .inputs.vm_name + " in namespace "+.inputs.vm_namespace'
                    topic: Request VM on CNV workflow
                  invoke: sync
                  refName: createNotification
                name: 'Create notification: VM creation denied'
            name: 'Create notification: VM creation denied'
        completionType: allOf
        end:
          terminate: true
        name: Notify VM creation denied
        numCompleted: 0
        type: parallel
  podTemplate:
    container:
      resources: {}
      image: quay.io/orchestrator/serverless-workflow-request-vm-cnv:5999a2d1fb5908cc2cc90ee609818b2320f58d28
  resources:
    configMaps:
      - configMap:
          name: 01-request-vm-cnv-resources
        workflowPath: schemas
      - configMap:
          name: 02-request-vm-cnv-resources
        workflowPath: specs
  persistence:
    postgresql:
      secretRef:
        name: sonataflow-psql-postgresql
        userKey: postgres-username
        passwordKey: postgres-password
      serviceRef:
        name: sonataflow-psql-postgresql
        port: 5432
        databaseName: sonataflow
        databaseSchema: request-vm-cnv
status:
  address: {}
  lastTimeRecoverAttempt: null
