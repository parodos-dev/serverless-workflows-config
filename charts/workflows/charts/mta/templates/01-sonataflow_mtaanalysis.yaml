apiVersion: sonataflow.org/v1alpha08
kind: SonataFlow
metadata:
  annotations:
    sonataflow.org/description: ""
    sonataflow.org/expressionLang: jq
    sonataflow.org/version: "1.0"
  creationTimestamp: null
  labels:
    app: mtaanalysis
    sonataflow.org/workflow-app: mtaanalysis
  name: mtaanalysis
  namespace: default
spec:
  flow:
    annotations:
      - workflow-type/infrastructure
    dataInputSchema:
      failOnValidationErrors: false
      schema: specs/mta-input.json
    functions:
      - name: filterApplication
        operation: '{application: .applications|map(select(.repository.url == .repositoryURL))[0]}'
        type: expression
      - name: getApplication
        operation: specs/mta.json#getApplications
        type: rest
      - name: createApplication
        operation: specs/mta.json#createApplication
        type: rest
      - name: createTaskgroup
        operation: specs/mta.json#createTaskgroup
        type: rest
      - name: submitTaskgroup
        operation: specs/mta.json#submitTaskgroup
        type: rest
      - name: getTaskgroup
        operation: specs/mta.json#getTaskgroup
        type: rest
      - name: createNotification
        operation: specs/notifications.yaml#createNotification
        type: rest
    start:
      stateName: GetApplication
    states:
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .applications
              useResults: true
            functionRef:
              invoke: sync
              refName: getApplication
            name: getApp
        name: GetApplication
        stateDataFilter:
          output: '{repositoryURL: .repositoryURL, application: .repositoryURL as $r| if .applications == null then null else .applications|map(select(.repository.url == $r))[0] end}'
        transition:
          nextState: AppExist
        type: operation
      - dataConditions:
          - condition: .application != null
            transition:
              nextState: CreateTaskgroup
        defaultCondition:
          transition:
            nextState: CreateApplication
        name: AppExist
        type: switch
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .application
              useResults: true
            functionRef:
              arguments:
                name: .repositoryURL
                repository:
                  kind: git
                  url: .repositoryURL
              invoke: sync
              refName: createApplication
            name: createApplication
        name: CreateApplication
        transition:
          nextState: CreateTaskgroup
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .taskgroup
              useResults: true
            functionRef:
              arguments:
                addon: windup
                data:
                  mode:
                    binary: false
                    diva: false
                    withDeps: false
                  output: /windup/report
                  rules:
                    labels:
                      - konveyor.io/target=cloud-readiness
                    path: ""
                    rulesets:
                      - id: 2
                        name: Containerization
                  scope:
                    withKnown: false
                  sources: []
                  targets:
                    - cloud-readiness
                name: taskgroup.windup
                tasks:
                  - application:
                      id: .application.id
                    name: parodos.windup
              invoke: sync
              refName: createTaskgroup
            name: createTaskgroup
        name: CreateTaskgroup
        transition:
          nextState: SubmitAnalysis
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            functionRef:
              arguments:
                addon: windup
                createUser: admin.noauth
                data: .taskgroup.data
                id: .taskgroup.id
                tasks: .taskgroup.tasks
              invoke: sync
              refName: submitTaskgroup
            name: submitTaskgroup
        name: SubmitAnalysis
        transition:
          nextState: GetAnalysis
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .taskgroup
              useResults: true
            functionRef:
              arguments:
                id: .taskgroup.id
              invoke: sync
              refName: getTaskgroup
            name: getTaskgroup
        name: GetAnalysis
        transition:
          nextState: poll
        type: operation
      - actionMode: sequential
        actions:
          - actionDataFilter:
              toStateData: .taskgroup
              useResults: true
            functionRef:
              arguments:
                id: .taskgroup.id
              invoke: sync
              refName: getTaskgroup
            sleep:
              before: PT2S
        name: poll
        transition:
          nextState: checkReportDone
        type: operation
      - dataConditions:
          - condition: (.taskgroup.state == "Ready" and .taskgroup.tasks[0].state == "Succeeded")
            transition:
              nextState: NotifyBackstage
        defaultCondition:
          transition:
            nextState: poll
        name: checkReportDone
        type: switch
      - actionMode: sequential
        actions:
          - actionDataFilter:
              useResults: true
            condition: .backstageUserOrGroup != null
            functionRef:
              arguments:
                message: '"<a href=\"" + $SECRET.mta_url+ "/hub/applications/" + (.application.id|tostring)+ "/bucket/" + .data.output + "\">MTA Analysis Rerport</a>"'
                origin: MTA Analysis Workflow
                targetGroups:
                  - .backstageUserOrGroup
                targetUsers:
                  - .backstageUserOrGroup
                title: '"MTA analysis report for " + .application.repository.url'
              invoke: sync
              refName: createNotification
        name: NotifyBackstage
        transition:
          nextState: report
        type: operation
      - actionMode: sequential
        actions: null
        end:
          terminate: true
        name: report
        stateDataFilter:
          output: '{result: (.taskgroup.tasks[0]| "report will be ready here -> " + $SECRET.mta_url + "/hub/applications/" + (.application.id|tostring) + "/bucket" + .data.output)}'
        type: operation
    timeouts:
      workflowExecTimeout:
        duration: PT1H
  podTemplate:
    container:
      resources: {}
      image: quay.io/orchestrator/serverless-workflow-mta:b82fbb767785ca548cf818710af45ad16047d30f
  resources:
    configMaps:
      - configMap:
          name: 01-mtaanalysis-resources
        workflowPath: specs
status:
  address: {}
  lastTimeRecoverAttempt: null
