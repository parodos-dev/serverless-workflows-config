apiVersion: sonataflow.org/v1alpha08
kind: SonataFlow
metadata:
  annotations:
    sonataflow.org/description: ""
    sonataflow.org/expressionLang: jq
    sonataflow.org/profile: dev
    sonataflow.org/version: 0.0.1
  creationTimestamp: null
  labels:
    app: ticketescalation
    sonataflow.org/workflow-app: ticketescalation
  name: ticketescalation
spec:
  flow:
    annotations:
    - workflow-type/infrastructure
    dataInputSchema:
      failOnValidationErrors: true
      schema: schemas/ticket-escalation-schema.json
    errors:
    - code: TimedOut
      name: timeoutError
    - code: "404"
      name: notAvailable
    events:
    - dataOnly: true
      kind: consumed
      name: approvalEvent
      source: ticket.listener
      type: dev.parodos.escalation
    functions:
    - name: createNotification
      operation: notifications#createNotification
      type: rest
    - name: createK8sNamespace
      operation: specs/kube.yaml#createCoreV1Namespace
      type: rest
    - name: logInfo
      operation: sysout:INFO
      type: custom
    start:
      stateName: CreateTicket
    states:
    - actionMode: sequential
      actions:
      - actionDataFilter:
          toStateData: .createResponse
          useResults: true
        subFlowRef:
          invoke: sync
          onParentComplete: terminate
          workflowId: ticketingService
      name: CreateTicket
      stateDataFilter:
        input: '. += { request: {type: "create", namespace: .namespace, parentId:
          $WORKFLOW.instanceId} }'
      transition:
        nextState: WaitForApprovalEvent
      type: operation
    - actionMode: sequential
      actions:
      - actionDataFilter:
          toStateData: .getResponse
          useResults: true
        subFlowRef:
          invoke: sync
          onParentComplete: terminate
          workflowId: ticketingService
      name: GetTicket
      stateDataFilter:
        input: '. += { request: { type: "get", ticketId: .createResponse.ticketId,
          ticket: .createResponse.ticket} }'
      transition:
        nextState: CheckTicketState
      type: operation
    - dataConditions:
      - condition: (.getResponse.status == "Approved")
        transition:
          nextState: CreateK8sNamespace
      defaultCondition:
        transition:
          nextState: WaitForApprovalEvent
      name: CheckTicketState
      type: switch
    - action:
        actionDataFilter:
          useResults: true
        functionRef:
          arguments:
            message: '"Waiting for approvalEvent: \(.)"'
          invoke: sync
          refName: logInfo
      eventRef: approvalEvent
      name: WaitForApprovalEvent
      onErrors:
      - errorRef: timeoutError
        transition:
          nextState: Escalate
      timeouts:
        eventTimeout: PT10S
      transition:
        nextState: CreateK8sNamespace
      type: callback
    - actionMode: sequential
      actions:
      - actionDataFilter:
          useResults: true
        functionRef:
          arguments:
            message: '"Invoking escalation: \(.)"'
          invoke: sync
          refName: logInfo
        name: printAction
      - actionDataFilter:
          useResults: true
        functionRef:
          arguments:
            actions:
            - title: '"Escalation ticket " + .createResponse.ticketId'
              url: .createResponse.browseUrl
            message: '"Please manage escalation ticket " + .createResponse.ticketId '
            origin: Escalation Workflow
            title: '"ATTN: Escalation for ticket - " + .createResponse.ticketId'
            topic: Escalation Workflow
          invoke: sync
          refName: createNotification
        name: createNotification
      name: Escalate
      onErrors:
      - errorRef: notAvailable
        transition:
          nextState: GetTicket
      transition:
        nextState: GetTicket
      type: operation
    - actionMode: sequential
      actions:
      - actionDataFilter:
          toStateData: .createdNamespace
          useResults: true
        functionRef:
          arguments:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: .namespace
          invoke: sync
          refName: createK8sNamespace
      end:
        terminate: true
      name: CreateK8sNamespace
      stateDataFilter:
        output: '{createdNamespace: .createdNamespace}'
      type: operation
    timeouts:
      workflowExecTimeout:
        duration: PT24H
  podTemplate:
    container:
      resources: {}
  resources:
    configMaps:
    - configMap:
        name: 01-ticketescalation-resources
      workflowPath: subflows
    - configMap:
        name: 02-ticketescalation-resources
      workflowPath: schemas
    - configMap:
        name: 03-ticketescalation-resources
      workflowPath: specs
status:
  address: {}
  lastTimeRecoverAttempt: null
